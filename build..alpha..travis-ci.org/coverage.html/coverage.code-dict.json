{"/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/test.js":"/* istanbul instrument in package npmtest_npm_windows_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/lib.npmtest_npm_windows_upgrade.js":"/* istanbul instrument in package npmtest_npm_windows_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_windows_upgrade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_windows_upgrade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-windows-upgrade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_windows_upgrade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_windows_upgrade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_windows_upgrade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_windows_upgrade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_windows_upgrade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_windows_upgrade.__dirname + '/lib.npmtest_npm_windows_upgrade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/bin/npm-windows-upgrade.js":"#! /usr/bin/env node\r\n\r\n// CHeck for incompatibilities\r\nrequire('../lib/compatible')\r\n\r\n// Proceed\r\nrequire('babel-polyfill')\r\n\r\nvar program = require('commander')\r\nvar pack = require('../package.json')\r\nvar Upgrader = require('../lib/upgrader')\r\n\r\nprogram\r\n  .version(pack.version)\r\n  .option('-d, --no-dns-check', 'Disable the internet connectivity test')\r\n  .option('-p, --no-spinner', 'Disable the spinner animation')\r\n  .option('-e, --no-execution-policy-check', 'Disable the PowerShell execution policy test')\r\n  .option('-n, --npm-path <path>', '(Optional) If passed, npm will be upgraded in the specified location')\r\n  .option('-v, --npm-version <version>', '(Optional) If passed, npm will be upgraded/downgraded to the specified version')\r\n  .option('--quiet', 'No output')\r\n  .option('--no-prompt', '[Deprecated] Use --no-spinner instead')\r\n  .parse(process.argv)\r\n\r\nconsole.log('npm-windows-upgrade v' + pack.version)\r\n\r\n// Execute\r\nvar upgrader = new Upgrader(program)\r\n\r\nupgrader.ensureExecutionPolicy()\r\n  .then(function () { return upgrader.ensureInternet() })\r\n  .then(function () { return upgrader.chooseVersion() })\r\n  .then(function () { return upgrader.choosePath() })\r\n  .then(function () { return upgrader.upgrade() })\r\n","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/compatible.js":"'use strict';\n\nmodule.export = function () {\n  if (process.version === 'v7.1.0') {\n    console.warn('--------------------------------------------------------------');\n    console.warn('You are running Node v7.1.0, which has a known bug on Windows,');\n    console.warn('breaking Node applications using the console (Powershell/CMD).');\n    console.warn('Please upgrade to a newer version or use Node v7.0.0.\\n\\n');\n    console.warn('Visit https://github.com/nodejs/node/issues/9542 for details.\\n');\n    console.warn('npm-windows-update will now run, but might fail.');\n    console.warn('---------------------------------------------------------------');\n  }\n\n  if (!/^win/.test(process.platform)) {\n    throw new Error('This script upgrades npm on Windows, but the OS is not Windows.');\n  }\n}();\n//# sourceMappingURL=compatible.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/debug.js":"'use strict';\n\nvar d = require('debug')('npm-windows-upgrade');\n\n// Ensure that all output is sent to stdout\ndebug.log = console.log.bind(console);\n\nfunction debug(message) {\n  return d(message);\n}\n\nmodule.exports = debug;\n//# sourceMappingURL=debug.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/find-npm.js":"'use strict';\n\nvar _require = require('child_process'),\n    spawn = _require.spawn,\n    exec = _require.exec;\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar utils = require('./utils');\nvar debug = require('./debug');\nvar strings = require('./strings');\n\n/**\r\n * Attempts to get npm's path by calling out to \"npm config\"\r\n *\r\n * @returns {Promise.<string>} - Promise that resolves with the found path (or null if not found)\r\n */\nfunction _getPathFromNpm() {\n  return new Promise(function (resolve) {\n    exec('npm config --global get prefix', function (err, stdout) {\n      if (err) {\n        resolve(null);\n      } else {\n        var npmPath = stdout.replace(/\\n/, '');\n        debug('PowerShell: _getPathFromNpm() resoving with: ' + npmPath);\n        resolve(npmPath);\n      }\n    });\n  });\n}\n\n/**\r\n * Attempts to get npm's path by calling out to \"Get-Command npm\"\r\n *\r\n * @returns {Promise.<string>} - Promise that resolves with the found path (or null if not found)\r\n */\nfunction _getPathFromPowerShell() {\n  return new Promise(function (resolve) {\n    var psArgs = 'Get-Command npm | Select-Object -ExpandProperty Definition';\n    var args = ['-NoProfile', '-NoLogo', psArgs];\n    var child = spawn('powershell.exe', args);\n\n    var stdout = [];\n    var stderr = [];\n\n    child.stdout.on('data', function (data) {\n      debug('PowerShell: Stdout received: ' + data.toString());\n      stdout.push(data.toString());\n    });\n\n    child.stderr.on('data', function (data) {\n      debug('PowerShell: Stderr received: ' + data.toString());\n      stderr.push(data.toString());\n    });\n\n    child.on('exit', function () {\n      var cmdPath = stdout[0] && stdout[0].trim ? stdout[0].trim() : null;\n\n      if (stderr.length === 0 && cmdPath && cmdPath.slice(cmdPath.length - 7) === 'npm.cmd') {\n        // We're probably installed in a location like C:\\Program Files\\nodejs\\npm.cmd,\n        // meaning that we should not use the global prefix installation location\n        var npmPath = cmdPath.slice(0, cmdPath.length - 8);\n        debug('PowerShell: _getPathFromPowerShell() resoving with: ' + npmPath);\n        resolve(npmPath);\n      } else {\n        resolve(null);\n      }\n    });\n\n    child.stdin.end();\n  });\n}\n\n/**\r\n * Attempts to get the current installation location of npm by looking up the global prefix.\r\n * Prefer PowerShell, be falls back to npm's opinion\r\n *\r\n * @return {Promise.<string>} - NodeJS installation path\r\n */\nfunction _getPath() {\n  return Promise.all([_getPathFromPowerShell(), _getPathFromNpm()]).then(function (results) {\n    var fromNpm = results[1] || '';\n    var fromPowershell = results[0] || '';\n\n    // Quickly check if there's an npm folder in there\n    var fromPowershellPath = path.join(fromPowershell, 'node_modules', 'npm');\n    var fromNpmPath = path.join(fromNpm, 'node_modules', 'npm');\n    var isFromPowershell = utils.isPathExists(fromPowershellPath);\n    var isFromNpm = utils.isPathExists(fromNpmPath);\n\n    // Found in...\n    // Powershell: -> return powershell path\n    // npm:        -> return npm path\n    // nowhere:    -> return powershell path\n    if (isFromPowershell) {\n      return {\n        path: fromPowershell,\n        message: strings.npmFoundIn(fromPowershell, fromNpm, fromPowershell)\n      };\n    } else if (isFromNpm) {\n      return {\n        path: fromNpm,\n        message: strings.npmFoundIn(fromPowershell, fromNpm, fromNpm)\n      };\n    } else {\n      return {\n        path: fromPowershell,\n        message: strings.npmNotFoundGuessing(fromPowershell, fromNpm, fromPowershell)\n      };\n    }\n  });\n}\n\n/**\r\n * Attempts to get npm's path by calling out to \"npm config\"\r\n *\r\n * @param  {string} npmPath - Input path if given by user\r\n * @returns {Promise.<string>}\r\n */\nfunction _checkPath(npmPath) {\n  return new Promise(function (resolve, reject) {\n    if (npmPath) {\n      fs.lstat(npmPath, function (err, stats) {\n        if (err || !stats || stats.isDirectory && !stats.isDirectory()) {\n          reject(new Error(strings.givenPathNotValid(npmPath)));\n        } else {\n          resolve({\n            path: npmPath,\n            message: strings.givenPathValid(npmPath)\n          });\n        }\n      });\n    } else {\n      reject(new Error('Called _checkPath() with insufficient parameters'));\n    }\n  });\n}\n\n/**\r\n * Finds npm - either by checking a given path, or by\r\n * asking the system for the location\r\n *\r\n * @param {string} npmPath - Input path if given by user\r\n * @returns {Promise.<string>}\r\n */\nfunction findNpm(npmPath) {\n  if (npmPath) {\n    return _checkPath(npmPath);\n  } else {\n    return _getPath();\n  }\n}\n\nmodule.exports = findNpm;\n//# sourceMappingURL=find-npm.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/utils.js":"'use strict';\n\nvar fs = require('fs');\n\nvar _require = require('child_process'),\n    spawn = _require.spawn;\n\n// Internal Modules\n\n\nvar debug = require('./debug');\n\n/**\r\n * Exits the process with a given status,\r\n * logging a given message before exiting.\r\n *\r\n * @param {number} status - exit status\r\n * @param {string} messages - message to log\r\n */\nfunction exit(status) {\n  for (var _len = arguments.length, messages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  if (messages) {\n    messages.forEach(function (message) {\n      return console.log(message);\n    });\n  }\n\n  process.exit(status);\n}\n\n/**\r\n * Checks for an active Internet connection by doing a DNS lookup of Microsoft.com.\r\n *\r\n * @return {Promise.<boolean>} - True if lookup succeeded (or if we skip the test)\r\n */\nfunction checkInternetConnection() {\n  return new Promise(function (resolve) {\n    require('dns').lookup('microsoft.com', function (err) {\n      if (err && err.code === 'ENOTFOUND') {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    });\n  });\n}\n\n/**\r\n * Checks the current Windows PS1 execution policy. The upgrader requires an unrestricted policy.\r\n *\r\n * @return {Promise.<boolean>} - True if unrestricted, false if it isn't\r\n */\nfunction checkExecutionPolicy() {\n  return new Promise(function (resolve, reject) {\n    var output = [];\n    var child = void 0;\n\n    try {\n      debug('Powershell: Attempting to spawn PowerShell child');\n      child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy']);\n    } catch (error) {\n      debug('Powershell: Could not spawn PowerShell child');\n      reject(error);\n    }\n\n    child.stdout.on('data', function (data) {\n      debug('PowerShell: Stdout received: ' + data.toString());\n      output.push(data.toString());\n    });\n\n    child.stderr.on('data', function (data) {\n      debug('PowerShell: Stderr received: ' + data.toString());\n      output.push(data.toString());\n    });\n\n    child.on('exit', function () {\n      var linesHit = output.filter(function (line) {\n        return line.includes('Unrestricted') || line.includes('RemoteSigned') || line.includes('Bypass');\n      });\n      var unrestricted = linesHit.length > 0;\n\n      if (!unrestricted) {\n        debug('PowerShell: Resolving restricted (false)');\n        resolve(false);\n      } else {\n        debug('PowerShell: Resolving unrestricted (true)');\n        resolve(true);\n      }\n    });\n\n    child.stdin.end();\n  });\n}\n\n/**\r\n * Checks if a path exists\r\n *\r\n * @param filePath - file path to check\r\n * @returns {boolean} - does the file path exist?\r\n */\nfunction isPathExists(filePath) {\n  try {\n    fs.accessSync(filePath);\n    debug('Utils: isPathExists(): ' + filePath + ' exists');\n    return true;\n  } catch (err) {\n    debug('Utils: isPathExists(): ' + filePath + ' does not exist');\n    return false;\n  }\n}\n\nmodule.exports = {\n  checkInternetConnection: checkInternetConnection,\n  checkExecutionPolicy: checkExecutionPolicy,\n  exit: exit,\n  isPathExists: isPathExists\n};\n//# sourceMappingURL=utils.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/powershell.js":"'use strict';\n\nvar _require = require('child_process'),\n    spawn = _require.spawn;\n\nvar path = require('path');\n\nvar debug = require('./debug');\n\n/**\r\n * Executes the PS1 script upgrading npm\r\n * @param  {string} version - The version to be installed (npm install npm@{version})\r\n * @param  {string} npmPath - Path to Node installation (optional)\r\n * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process\r\n */\nfunction runUpgrade(version, npmPath) {\n  return new Promise(function (resolve, reject) {\n    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1');\n    var psArgs = npmPath === null ? '& {& \\'' + scriptPath + '\\' -version \\'' + version + '\\' }' : '& {& \\'' + scriptPath + '\\' -version \\'' + version + '\\' -NodePath \\'' + npmPath + '\\' }';\n    var args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];\n\n    if (process.env.DEBUG) {\n      args.push('-debug');\n    }\n\n    var stdout = [];\n    var stderr = [];\n    var child = void 0;\n\n    try {\n      child = spawn('powershell.exe', args);\n    } catch (error) {\n      return reject(error);\n    }\n\n    child.stdout.on('data', function (data) {\n      debug('PowerShell: Stdout received: ' + data.toString());\n      stdout.push(data.toString());\n    });\n\n    child.stderr.on('data', function (data) {\n      debug('PowerShell: Stderr received: ' + data.toString());\n      stderr.push(data.toString());\n    });\n\n    child.on('exit', function () {\n      return resolve({ stderr: stderr, stdout: stdout });\n    });\n    child.stdin.end();\n  });\n}\n\n/**\r\n * Executes 'npm install -g npm' upgrading npm\r\n * @param  {string} version - The version to be installed (npm install npm@{version})\r\n * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process\r\n */\nfunction runSimpleUpgrade(version) {\n  return new Promise(function (resolve) {\n    var npmCommand = version ? 'npm install -g npm@' + version : 'npm install -g npm';\n    var stdout = [];\n    var stderr = [];\n    var child = void 0;\n\n    try {\n      child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', npmCommand]);\n    } catch (error) {\n      // This is dirty, but the best way for us to try/catch right now\n      resolve({ error: error });\n    }\n\n    child.stdout.on('data', function (data) {\n      return stdout.push(data.toString());\n    });\n    child.stderr.on('data', function (data) {\n      return stderr.push(data.toString());\n    });\n\n    child.on('exit', function () {\n      return resolve({ stderr: stderr, stdout: stdout });\n    });\n\n    child.stdin.end();\n  });\n}\n\nmodule.exports = {\n  runUpgrade: runUpgrade,\n  runSimpleUpgrade: runSimpleUpgrade\n};\n//# sourceMappingURL=powershell.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/strings.js":"'use strict';\n\nvar chalk = require('chalk');\n\nmodule.exports = {\n  noInternet: chalk.bold.red('We have trouble connecting to the Internet. Aborting.'),\n  noExecutionPolicy: chalk.bold.red('\\nScripts cannot be executed on this system.\\n') + 'To fix, run the command below as Administrator in PowerShell and try again:\\nSet-ExecutionPolicy Unrestricted -Scope CurrentUser -Force',\n  noAdmin: chalk.bold.red('\\nNPM cannot be upgraded without administrative rights. To run PowerShell as Administrator,\\nright-click PowerShell and select \\'Run as Administrator\\'.'),\n  executionPolicyCheckError: 'Encountered an error while checking the system\\'s execution policy',\n  startingUpgradeSimple: 'Upgrading npm (fallback method)...',\n  startingUpgradeComplex: 'Upgrading npm...',\n  upgradeFinished: function upgradeFinished(installedVersion) {\n    return chalk.bold.green('Upgrade finished. Your new npm version is ' + installedVersion + '. Have a nice day!');\n  },\n  npmFoundIn: function npmFoundIn(ps, npm, truth) {\n    return 'Checked system for npm installation:\\nAccording to PowerShell: ' + ps + '\\nAccording to npm:        ' + npm + '\\n' + chalk.bold.green('Decided that npm is installed in ' + truth);\n  },\n  npmNotFoundGuessing: function npmNotFoundGuessing(ps, npm, truth) {\n    return 'Checked system for npm installation:\\nAccording to PowerShell: ' + ps + '\\nAccording to npm: ' + npm + '\\n' + chalk.bold.green('Decided that npm is not installed in either, but attempting to install in ' + truth);\n  },\n  givenPathNotValid: function givenPathNotValid(path) {\n    return 'Given path ' + path + ' is not a valid directory.\\nPlease ensure that you added the correct path and try again!';\n  },\n  givenPathValid: function givenPathValid(path) {\n    return 'Given path ' + path + ' is a valid directory.';\n  }\n};\n//# sourceMappingURL=strings.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/upgrader.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = require('cli-spinner'),\n    Spinner = _require.Spinner;\n\nvar chalk = require('chalk');\nvar inquirer = require('inquirer');\n\nvar powershell = require('./powershell');\nvar utils = require('./utils');\nvar strings = require('./strings');\nvar versions = require('./versions');\nvar findNpm = require('./find-npm');\nvar debug = require('./debug');\n\n// eslint-disable-next-line no-use-before-define\nvar regeneratorRuntime = regeneratorRuntime || require('regenerator-runtime-only');\n\nvar Upgrader = function () {\n  function Upgrader(program) {\n    _classCallCheck(this, Upgrader);\n\n    this.options = program;\n\n    if (this.options.prompt === false) {\n      this.options.spinner = false;\n    }\n  }\n\n  /**\r\n   * Executes the upgrader's \"let's check the user's internet\" logic,\r\n   * eventually quietly resolving or quitting the proccess with an\r\n   * error if the connection is not sufficient\r\n   */\n\n\n  _createClass(Upgrader, [{\n    key: 'ensureInternet',\n    value: function ensureInternet() {\n      var isOnline;\n      return regeneratorRuntime.async(function ensureInternet$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.options.dnsCheck !== false)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return regeneratorRuntime.awrap(utils.checkInternetConnection());\n\n            case 3:\n              isOnline = _context.sent;\n\n\n              if (!isOnline) {\n                utils.exit(1, strings.noInternet);\n              }\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n\n    /**\r\n     * Executes the upgrader's \"let's check the user's powershell exeuction\r\n     * policy\" logic, eventually quietly resolving or quitting the proccess\r\n     * with an error if the policy is not sufficient\r\n     */\n\n  }, {\n    key: 'ensureExecutionPolicy',\n    value: function ensureExecutionPolicy() {\n      var isExecutable;\n      return regeneratorRuntime.async(function ensureExecutionPolicy$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.options.executionPolicyCheck !== false)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return regeneratorRuntime.awrap(utils.checkExecutionPolicy());\n\n            case 4:\n              isExecutable = _context2.sent;\n\n\n              if (!isExecutable) {\n                utils.exit(1, strings.noExecutionPolicy);\n              }\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2['catch'](1);\n\n              utils.exit(1, strings.executionPolicyCheckError, _context2.t0);\n\n            case 11:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[1, 8]]);\n    }\n\n    /**\r\n     * Checks if the upgrade was successful\r\n     *\r\n     * @return {boolean} - was the upgrade successful?\r\n     */\n\n  }, {\n    key: 'wasUpgradeSuccessful',\n    value: function wasUpgradeSuccessful() {\n      return regeneratorRuntime.async(function wasUpgradeSuccessful$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return regeneratorRuntime.awrap(versions.getInstalledNPMVersion());\n\n            case 2:\n              this.installedVersion = _context3.sent;\n              return _context3.abrupt('return', this.installedVersion === this.options.npmVersion);\n\n            case 4:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n\n    /**\r\n     * Executes the upgrader's \"let's have the user choose a version\" logic\r\n     */\n\n  }, {\n    key: 'chooseVersion',\n    value: function chooseVersion() {\n      var availableVersions, versionList;\n      return regeneratorRuntime.async(function chooseVersion$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.options.npmVersion) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 3;\n              return regeneratorRuntime.awrap(versions.getAvailableNPMVersions());\n\n            case 3:\n              availableVersions = _context4.sent;\n              versionList = [{\n                type: 'list',\n                name: 'version',\n                message: 'Which version do you want to install?',\n                choices: availableVersions.reverse()\n              }];\n              _context4.next = 7;\n              return regeneratorRuntime.awrap(inquirer.prompt(versionList).then(function (answer) {\n                return answer.version;\n              }));\n\n            case 7:\n              this.options.npmVersion = _context4.sent;\n\n            case 8:\n              if (!(this.options.npmVersion === 'latest')) {\n                _context4.next = 12;\n                break;\n              }\n\n              _context4.next = 11;\n              return regeneratorRuntime.awrap(versions.getLatestNPMVersion());\n\n            case 11:\n              this.options.npmVersion = _context4.sent;\n\n            case 12:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n\n    /**\r\n     * Executes the upgrader's \"let's find npm\" logic\r\n     */\n\n  }, {\n    key: 'choosePath',\n    value: function choosePath() {\n      var npmPaths;\n      return regeneratorRuntime.async(function choosePath$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return regeneratorRuntime.awrap(findNpm(this.options.npmPath));\n\n            case 3:\n              npmPaths = _context5.sent;\n\n\n              this.log(npmPaths.message);\n              this.options.npmPath = npmPaths.path;\n\n              debug('Upgrader: Chosen npm path: ' + this.options.npmPath);\n              _context5.next = 12;\n              break;\n\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5['catch'](0);\n\n              utils.exit(1, _context5.t0);\n\n            case 12:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, null, this, [[0, 9]]);\n    }\n\n    /**\r\n     * Attempts a simple upgrade, eventually calling npm install -g npm\r\n     *\r\n     * @param {string} version - Version that should be installed\r\n     * @private\r\n     */\n\n  }, {\n    key: 'upgradeSimple',\n    value: function upgradeSimple() {\n      var output;\n      return regeneratorRuntime.async(function upgradeSimple$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              this.spinner = new Spinner(strings.startingUpgradeSimple + ' %s');\n\n              if (this.options.spinner === false) {\n                console.log(strings.startingUpgradeSimple);\n              } else {\n                this.spinner.start();\n              }\n\n              _context6.next = 4;\n              return regeneratorRuntime.awrap(powershell.runSimpleUpgrade(this.options.npmVersion));\n\n            case 4:\n              output = _context6.sent;\n\n\n              this.spinner.stop(false);\n              console.log('\\n');\n\n              if (!output.error) {\n                _context6.next = 9;\n                break;\n              }\n\n              throw output.error;\n\n            case 9:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, null, this);\n    }\n\n    /**\r\n     * Upgrades npm in the correct directory, securing and reapplying\r\n     * existing configuration\r\n     *\r\n     * @param  {string} version - Version that should be installed\r\n     * @param  {string} npmPath - Path where npm should be installed\r\n     * @private\r\n     */\n\n  }, {\n    key: 'upgradeComplex',\n    value: function upgradeComplex() {\n      var output;\n      return regeneratorRuntime.async(function upgradeComplex$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              this.spinner = new Spinner(strings.startingUpgradeComplex + ' %s');\n\n              if (this.options.spinner === false) {\n                console.log(strings.startingUpgradeComplex);\n              } else {\n                this.spinner.start();\n              }\n\n              _context7.next = 4;\n              return regeneratorRuntime.awrap(powershell.runUpgrade(this.options.npmVersion, this.options.npmPath));\n\n            case 4:\n              output = _context7.sent;\n\n\n              this.spinner.stop(false);\n              console.log('\\n');\n\n              // If we failed to elevate to administrative rights, we have to abort.\n              if (output.stdout[0] && output.stdout[0].includes('NOTADMIN')) {\n                utils.exit(1, strings.noAdmin);\n              }\n\n            case 8:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, null, this);\n    }\n\n    /**\r\n     * Executes the full upgrade flow\r\n     */\n\n  }, {\n    key: 'upgrade',\n    value: function upgrade() {\n      var _this = this;\n\n      debug('Starting upgrade');\n\n      return this.upgradeComplex().then(function () {\n        return _this.wasUpgradeSuccessful();\n      }).then(function (isDone) {\n        if (isDone) {\n          // Awesome, the upgrade worked!\n          utils.exit(0, strings.upgradeFinished(_this.installedVersion));\n        } else {\n          return _this.upgradeSimple();\n        }\n      }).then(function () {\n        return _this.wasUpgradeSuccessful();\n      }).then(function (isDone) {\n        if (isDone) {\n          // Awesome, the upgrade worked!\n          utils.exit(0, strings.upgradeFinished(_this.installedVersion));\n        } else {\n          _this.logUpgradeFailure();\n        }\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n\n    /**\r\n     * Logs a message to console, unless the user specified quiet mode\r\n     *\r\n     * @param {string} message - message to log\r\n     * @private\r\n     */\n\n  }, {\n    key: 'log',\n    value: function log(message) {\n      if (!this.options.quiet) {\n        console.log(message);\n      }\n    }\n\n    /**\r\n     * If the whole upgrade failed, we use this method to log a\r\n     * detailed trace with versions - all to make it easier for\r\n     * users to create meaningful issues.\r\n     *\r\n     * @param errors {array} - AS many errors as found\r\n     */\n\n  }, {\n    key: 'logUpgradeFailure',\n    value: function logUpgradeFailure() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, errors = Array(_len), _key = 0; _key < _len; _key++) {\n        errors[_key] = arguments[_key];\n      }\n\n      // Uh-oh, something didn't work as it should have.\n      versions.getVersions().then(function (debugVersions) {\n        var info = void 0;\n\n        if (_this2.options.npmVersion && _this2.installedVersion) {\n          info = 'You wanted to install npm ' + _this2.options.npmVersion + ', but the installed version is ' + _this2.installedVersion + '.\\n\\n';\n          info += 'A common reason is an attempted \"npm install npm\" or \"npm upgrade npm\".';\n          info += 'As of today, the only solution is to completely uninstall and then reinstall Node.js.';\n          info += 'For a small tutorial, please see http://aka.ms/fix-npm-upgrade.\\n';\n        } else if (_this2.options.npmVersion) {\n          info = 'You wanted to install npm ' + _this2.options.npmVersion + ', but we could not confirm that the installation succeeded.';\n        } else {\n          info = 'We encountered an error during installation.\\n';\n        }\n\n        info += 'Please consider reporting your trouble to http://aka.ms/npm-issues.';\n\n        console.log(chalk.red(info));\n\n        console.log(chalk.bold('\\nDebug Information:\\n'));\n        console.log(debugVersions);\n\n        if (errors && errors.length && errors.length > 0) console.log('Here is the error:');\n\n        // If we just got an error string (we shouldn't handle that)\n        if (typeof errors !== 'string') {\n          console.log('\\n' + errors + '\\n');\n          return process.exit(1);\n        }\n\n        for (var i = 0; i < errors.length; i++) {\n          console.log('\\n' + errors[i] + '\\n');\n        }\n\n        setTimeout(function () {\n          process.exit(1);\n        }, 1000);\n      });\n    }\n  }]);\n\n  return Upgrader;\n}();\n\nmodule.exports = Upgrader;\n//# sourceMappingURL=upgrader.js.map","/home/travis/build/npmtest/node-npmtest-npm-windows-upgrade/node_modules/npm-windows-upgrade/lib/versions.js":"'use strict';\n\nvar exec = require('child_process').exec;\nvar nwuVersion = require('../package.json').version;\n\n/**\r\n * Gets the currently installed version of npm (npm -v)\r\n * @return {Promise.<string>} - Installed version of npm\r\n */\nfunction getInstalledNPMVersion() {\n  return new Promise(function (resolve, reject) {\n    var nodeVersion = void 0;\n\n    exec('npm -v', function (err, stdout) {\n      if (err) {\n        reject(new Error('Could not determine npm version.'));\n      } else {\n        nodeVersion = stdout.replace(/\\n/, '');\n        resolve(nodeVersion);\n      }\n    });\n  });\n}\n\n/**\r\n * Fetches the published versions of npm from the npm registry\r\n * @return {Promise.<versions[]>} - Array of the available versions\r\n */\nfunction getAvailableNPMVersions() {\n  return new Promise(function (resolve, reject) {\n    exec('npm view npm versions --json', function (err, stdout) {\n      if (err) {\n        var error = 'We could not show latest available versions. Try running this script again ';\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)';\n        return reject(error);\n      }\n\n      resolve(JSON.parse(stdout));\n    });\n  });\n}\n\n/**\r\n * Fetches the published versions of npm from the npm registry\r\n * @return {Promise.<version>} - Array of the available versions\r\n */\nfunction getLatestNPMVersion() {\n  return new Promise(function (resolve, reject) {\n    exec('npm show npm version', function (err, stdout) {\n      if (err) {\n        var error = 'We could not show latest available versions. Try running this script again ';\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)';\n        return reject(error);\n      }\n\n      var latest = stdout.replace(/(\\r\\n|\\n|\\r)/gm, '');\n\n      resolve(latest.trim());\n    });\n  });\n}\n\n/**\r\n * Get the current name and version of Windows\r\n */\nfunction _getWindowsVersion() {\n  return new Promise(function (resolve, reject) {\n    var command = 'systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"';\n    exec(command, function (error, stdout) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n}\n\n/**\r\n * Get installed versions of virtually everything important\r\n */\nfunction getVersions() {\n  return new Promise(function (resolve) {\n    var versions = process.versions;\n    var prettyVersions = '';\n    versions.os = process.platform + ' ' + process.arch;\n\n    for (var variable in versions) {\n      if (versions.hasOwnProperty(variable)) {\n        prettyVersions += variable + ': ' + versions[variable];\n      }\n    }\n\n    _getWindowsVersion().then(function (windowsVersion) {\n      prettyVersions += windowsVersion.replace(/  +/g, ' '); // eslint-disable-line no-regex-spaces\n      resolve(prettyVersions);\n    });\n  });\n}\n\nmodule.exports = {\n  nwuVersion: nwuVersion,\n  getInstalledNPMVersion: getInstalledNPMVersion,\n  getLatestNPMVersion: getLatestNPMVersion,\n  getAvailableNPMVersions: getAvailableNPMVersions,\n  getVersions: getVersions\n};\n//# sourceMappingURL=versions.js.map"}